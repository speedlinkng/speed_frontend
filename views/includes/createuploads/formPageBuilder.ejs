<script src="../../js/pond.js"></script>
<script src="../js/formBuilder/testformfield.js"></script>
<div><%- include('./rightPanel.ejs') %></div>
<div x-data class="wholePage" id="sort-all">
  <div class="mt-5">
    <div
      page-count="1"
      class="EACHPAGE place-content-center p-2 sm:max-w-[900px] card bg-white rounded-md h-fit m-auto left-0 right-0 relative"
    >
      <div
        class="grid grid-cols-12"
        x-data="{ isOpenTitle: true }"
        x-show="isOpenTitle"
      >
        <!-- INPUT TITLE -->
        <input
          class="uph_1 form-input col-span-10 sm:col-span-8 text-[30px] rounded-lg border-slate-300 bg-transparent px-3 py-2 focus:border placeholder:text-slate-400/70 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent"
          placeholder="Upload Page Header"
          type="text"
        />
        <!-- EDIT PENCIL BUTTON -->
        <div class="col-span-2 sm:col-span-2 p-2 mt-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            data-slot="icon"
            class="w-4 h-4"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"
            />
          </svg>
        </div>
        <!-- DELETE BUTTON -->
        <button
          @click="isOpenTitle = false"
          class="col-span-3 sm:col-span-2 sm:mt-2 ml-[4px] btn h-9 w-9 p-0 font-medium text-error hover:bg-error/20 focus:bg-error/20 active:bg-error/25"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h4 w-4"
            fill="none"
            viewbox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
            />
          </svg>
        </button>
      </div>

      <div
        class="grid grid-cols-12 gap-[]"
        x-data="{ isOpenDesc: true }"
        x-show="isOpenDesc"
      >
        <!-- INPUT DESCRIPTION -->
        <input
          class="upd_1 form-input col-span-10 sm:col-span-8 text-base rounded-lg border-slate-300 bg-transparent px-3 py-2 focus:border placeholder:text-slate-400/70 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent"
          placeholder="Upload Page Description"
          type="text"
        />
        <!-- EDIT PENCIL BUTTON -->
        <div class="col-span-2 sm:col-span-2 p-2 mt-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            data-slot="icon"
            class="w-4 h-4"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"
            />
          </svg>
        </div>
        <!-- DELETE BUTTON -->
        <button
          @click="isOpenDesc = false"
          class="col-span-3 sm:col-span-2 sm:mt-2 ml-[4px] btn h-9 w-9 p-0 font-medium text-error hover:bg-error/20 focus:bg-error/20 active:bg-error/25"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h4 w-4"
            fill="none"
            viewbox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
            />
          </svg>
        </button>
      </div>

      <div
        x-data
        id="showResult_"
        class="showResult_ use_drag formClass p-2 grid grid-cols-1 place-content-center w-[100%]"
      >
        <!-- Your existing code for showResult_ -->
      </div>

      <div
        x-data="{ inputEntered: false, inputHasValue: 'Submit Answers' }"
        class="ml-2 flex border text-center justify-center rounded-lg px-2 w-fit sm:w-[40%] md:w-fit border-primary font-medium text-primary hover:bg-primary hover:text-white focus:bg-primary focus:text-white active:bg-primary/90 dark:border-accent dark:text-accent-light dark:hover:bg-accent dark:hover:text-white dark:focus:bg-accent dark:focus:text-white dark:active:bg-accent/90"
      >
        <span
          x-on:input="inputHasValue = $event.target.innerText"
          contenteditable="true"
          x-text="inputHasValue"
          x-on:keyup="inputEntered = true"
          @blur="inputEntered = false"
          class="edit_submit_field1 text-base py-2 px-2 border-0 bg-transparent min-w-[60px] max-w-[200px]"
          style="display: inline-block; border: 0; outline: none"
        ></span>
        <input
          x-model="inputHasValue"
          x-on:keyup="inputEntered = true"
          @blur="inputEntered = false"
          class="hidden edit_submit_field1 text-lg btn !p-0 border-0 bg-transparent !w-fit"
          value=""
        />
        <div x-show="!inputEntered" class="grid place-content-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            data-slot="icon"
            class="w-4 h-4"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"
            />
          </svg>
        </div>
      </div>

      <br />
      <div>
        <div class="flex">
          <button
            :class="$store.expanded_condition && 'border'"
            @click="falsifyAllExpanded()"
            onclick="addQ(), drag()"
            id="add_question"
            class="btn text-sm bg-gray-100 font-medium text-slate-800 hover:bg-slate-200 focus:bg-slate-200 active:bg-slate-200/80 dark:bg-navy-500 dark:text-navy-50 dark:hover:bg-navy-450 dark:focus:bg-navy-450 dark:active:bg-navy-450/90"
          >
            Add Field
          </button>
        </div>
        <br />
      </div>
    </div>
  </div>
</div>

<br />
<div class="w-full flex space-x-3 justify-center items-center">
  <button
    onclick="addPage()"
    data-count=""
    class="rounded-lg w-[90%] px-3 py-3 bg-gray-100 font-medium text-slate-800 hover:bg-slate-200 focus:bg-slate-200 active:bg-slate-200/80 dark:bg-navy-500 dark:text-navy-50 dark:hover:bg-navy-450 dark:focus:bg-navy-450 dark:active:bg-navy-450/90"
  >
    Add Page
  </button>
  <button
    onclick="getFieldValues('preview')"
    data-count=""
    class="rounded-lg w-[90%] px-3 py-3 bg-gray-100 font-medium text-slate-800 hover:bg-slate-200 focus:bg-slate-200 active:bg-slate-200/80 dark:bg-navy-500 dark:text-navy-50 dark:hover:bg-navy-450 dark:focus:bg-navy-450 dark:active:bg-navy-450/90"
  >
    Preview
  </button>
</div>

<script>
  const eachPageDivs = document.querySelectorAll(".wholePage"); // how many pages currently *resent 6n screen

  const eachPageDivs_ = eachPageDivs.length;

  var resultCount = eachPageDivs_; // Initialize the count outside the function

  function addPage() {
    // alert(resultCount)
    // Increment the resultCount and set the data-count attribute
    let _count = ++resultCount;

    // alert(_count)

    const addpage = 1;

    // Get the HTML content of the wholePage element
    const wholePageHTML = `
            <div page-count="${_count}" class="EACHPAGE this_page${_count} place-content-center p-2 sm:max-w-[900px] card bg-white rounded-md h-fit m-auto left-0 right-0 relative dark:border-t dark:border-navy-450">
    
                <div class="grid grid-cols-12 "  x-data="{ isOpenTitle: true }" x-show="isOpenTitle">
                  <!-- INPUT TITLE -->
                  <input class="uph_1 form-input col-span-10 sm:col-span-8 text-[30px] rounded-lg border-slate-300 bg-transparent px-3 py-2 focus:border placeholder:text-slate-400/70 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent" placeholder="Upload Title" type="text" />    
                  <!-- EDIT BUTTON -->
                  <div class=" col-span-2 sm:col-span-2 p-2 mt-2 ">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" data-slot="icon" class="w-5 h-5">
                      <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125" />
                    </svg>
                  </div>
                  <!-- DELETE BUTTON -->
                  <button @click="isOpenTitle = false" class="col-span-3 sm:col-span-2 sm:mt-2 ml-[4px] btn h-9 w-9 p-0 font-medium text-error hover:bg-error/20 focus:bg-error/20 active:bg-error/25">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h4 w-4" fill="none" viewbox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>

                <div class="grid grid-cols-12 gap-[] " x-data="{ isOpenDesc: true }" x-show="isOpenDesc">
                  <!-- INPUT DESCRIPTION -->
                  <input class="upd_${_count} form-input col-span-10 sm:col-span-8 text-base rounded-lg border-slate-300 bg-transparent px-3 py-2 focus:border placeholder:text-slate-400/70 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent" placeholder="Upload Description" type="text" />    
                  <!-- EDIT BUTTON -->
                  <div class=" col-span-2 sm:col-span-2 p-2 mt-2 ">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" data-slot="icon" class="w-5 h-5">
                      <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125" />
                    </svg>
                  </div>
                  <!-- DELETE BUTTON -->
                  <button @click="isOpenDesc = false" class="col-span-3 sm:col-span-2 sm:mt-2 ml-[4px] btn h-9 w-9 p-0 font-medium text-error hover:bg-error/20 focus:bg-error/20 active:bg-error/25">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h4 w-4" fill="none" viewbox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                  
                </div>
          
              <div x-data class="showResult_${_count} use_drag2 formClass p-2 grid grid-cols-1 place-content-center w-full">
              
              </div>
              <div x-data="{ inputEntered: false, inputHasValue: 'Submit Answers' }" class="hidden ml-2 flex border text-center justify-center rounded-lg px-2 w-[40%] sm:w-[40%] md:w-[40%] border-primary font-medium text-primary hover:bg-primary hover:text-white focus:bg-primary focus:text-white active:bg-primary/90 dark:border-accent dark:text-accent-light dark:hover:bg-accent dark:hover:text-white dark:focus:bg-accent dark:focus:text-white dark:active:bg-accent/90">
                <span x-on:input="inputHasValue = $event.target.innerText" contenteditable="true" x-text="inputHasValue" x-on:keyup="inputEntered = true" @blur="inputEntered = false" class=" content_edit_submit_field${
                  _count + 1
                } text-base btn  py-2 px-2 border-0 bg-transparent min-w-[60px] max-w-[200px]"  style="display: inline-block; border:0; outline:none;">
                </span>
                <input x-model="inputHasValue" class=" hidden edit_submit_field${_count} hidden text-lg btn !p-0 border-0 bg-transparent !w-fit" />
                <div x-show="!inputEntered" class="grid place-content-center">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" data-slot="icon" class="w-4 h-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125" />
                  </svg>
                </div>
              </div>

              <div x-data="{ inputEntered: false, inputHasValue: 'Submit Answers' }" class="ml-2 flex border text-center justify-center rounded-lg px-2 w-fit sm:w-[40%] md:w-fit border-primary font-medium text-primary hover:bg-primary hover:text-white focus:bg-primary focus:text-white active:bg-primary/90 dark:border-accent dark:text-accent-light dark:hover:bg-accent dark:hover:text-white dark:focus:bg-accent dark:focus:text-white dark:active:bg-accent/90" >
              <span x-on:input="inputHasValue = $event.target.innerText"  contenteditable="true" x-text="inputHasValue" x-on:keyup="inputEntered = true" @blur="inputEntered = false" class="content_edit_submit_field${
                _count + 1
              } text-base py-2 px-2 border-0 bg-transparent min-w-[60px] max-w-[200px]" style="display: inline-block; border: 0; outline: none"></span>
              <input x-model="inputHasValue" x-on:keyup="inputEntered = true"  @blur="inputEntered = false" class="hidden edit_submit_field${_count} text-lg btn !p-0 border-0 bg-transparent !w-fit"
                value=""
              />
              <div x-show="!inputEntered" class="grid place-content-center">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none"  viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" data-slot="icon" class="w-4 h-4" >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"
                  />
                </svg>
              </div>
            </div>
              <br>
              <div>
                <div class="flex space-x-2">
                  <button :class="$store.expanded_condition && 'border'" @click="falsifyAllExpanded()" onclick="addQ(${null},${_count})" id="add_question${_count}" class="btn text-sm bg-gray-100 font-medium text-slate-800 hover:bg-slate-200 focus:bg-slate-200 active:bg-slate-200/80 dark:bg-navy-500 dark:text-navy-50 dark:hover:bg-navy-450 dark:focus:bg-navy-450 dark:active:bg-navy-450/90">
                    Add Field
                  </button>
                  <button @click="deletePage(${_count})" id="delete_page" class="btn text-sm text-error border border-error hover:bg-error/20 font-medium focus:bg-slate-200 active:bg-slate-200/80 dark:bg-navy-500 dark:text-navy-50 dark:hover:border-error">
                    Delete Page app
                  </button>
                  <button @click="openPageSetings()" id="page_settings" class="btn text-sm text-error border-warning hover:bg-warning/20 font-medium text-slate-800 hover:bg-slate-200 focus:bg-slate-200 active:bg-slate-200/80 dark:bg-navy-500 dark:text-navy-50 dark:hover:bg-navy-450 dark:focus:bg-navy-450 dark:active:bg-navy-450/90">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 0 1 1.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.559.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.894.149c-.424.07-.764.383-.929.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 0 1-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.398.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 0 1-.12-1.45l.527-.737c.25-.35.272-.806.108-1.204-.165-.397-.506-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.108-1.204l-.526-.738a1.125 1.125 0 0 1 .12-1.45l.773-.773a1.125 1.125 0 0 1 1.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894Z" />
                      <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                    </svg>   
                  </button>
           
                </div><br>
              </div>
            </div>`;

    $(".wholePage").append(
      `<div class="wholePage_ mt-5">${wholePageHTML}</div>`
    );
    // alert(count)
    adddefaultQ(addpage, _count);

    function dragNewPage2() {
      const sortAll3 = document.querySelector(".use_drag2");
      // const sortAll2 = document.querySelector('.showResult_')
      let items = sortAll2.querySelectorAll(".item");
      console.log("ALL ITEMS", items);
      console.log("sortAll2", sortAll23);
      items.forEach((item) => {
        item.addEventListener("dragstart", () => {
          setTimeout(function () {
            item.classList.add("dragging");
            item.classList.add("hoverDash");
          }, 0);
        });

        item.addEventListener("dragend", () => {
          item.classList.remove("hoverDash");
          item.classList.remove("dragging");
        });
      });
      let initSortable3 = (e) => {
        e.preventDefault();
        let draggingItem = sortAll2.querySelector(".dragging");
        let siblings = [...sortAll2.querySelectorAll(".item:not(.dragging)")];

        let mouseY = e.clientY;

        let nextSibling = siblings.find((sibling) => {
          // console.log(sibling)
          let rect = sibling.getBoundingClientRect();
          let offset = 12; // Adjust this value to control the trigger point
          // Check if dragging upwards or downwards
          let direction = mouseY > rect.top + rect.height / 2 ? 1 : -1;

          // Calculate trigger point based on direction
          let siblingTriggerY = rect.top + rect.height / 2 + direction * offset;

          // Trigger move when halfway into the next sibling regardless of direction
          return mouseY <= siblingTriggerY;
        });

        console.log("NEXT SIBBLING", nextSibling);
        console.log("dragging Item", draggingItem);
        if (nextSibling === undefined) {
          sortAll23.appendChild(draggingItem); // Append to the end if no next sibling found
        } else {
          sortAll23.insertBefore(draggingItem, nextSibling);
        }
        console.log(nextSibling);
      };

      sortAll23.addEventListener("dragover", initSortable3);
      sortAll23.addEventListener("dragenter", (e) => e.preventDefault());
    }
    setTimeout(() => {
      dragNewPage2();
    }, 3000);
  }

  function deletePage(e) {
    var fieldToDelte = $(`.this_page${e}`);
    fieldToDelte.remove();
  }

  function falsifyAllExpanded() {
    for (let i = 0; i <= count; i++) {
      // Update the global state directly
      Alpine.store("expanded_condition" + i, false);
      Alpine.store("expanded" + i, false);
    }
  }
</script>

<script>
  function downloadJson(result) {
    // Convert the JSON to a string
    const resultJsonString = JSON.stringify(result, null, 2);

    // Create a Blob with the JSON string
    const blob = new Blob([resultJsonString], { type: "application/json" });

    // Create a download link
    const link = document.createElement("a");
    link.href = window.URL.createObjectURL(blob);
    link.download = "result.json";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  async function checkRequestId(input) {
    let valueOf = input.value || $(".page_url").val();

    const res = await fetch(`${backendUrl}/api/app/checkId/${valueOf}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${localStorage.getItem("access")}`,
      },
    });

    const data = await res.json();
    if (data.bool === false) {
      $(".page_url_parent").removeClass("border-red-500");
      $(".page_url_parent").addClass("border-green-500");
      $(".check_url").show();
      $(".cancel_url").hide();
      return false;
    } else {
      $(".page_url").val("");
      $(".check_url").hide();
      $(".cancel_url").show();
      $(".page_url_parent").removeClass("border-green-500");
      $(".page_url_parent").removeClass("border-slate-300");
      $(".page_url_parent").addClass("border-red-500");
      showNoti("error", "This url code has already been used", 4000);
      return true;
    }
  }

  async function getFieldValues(e = null) {
    // other input data
    localStorage.getItem("preferred"); //.. initialize this

    if (e.innerText && e.innerText.toLowerCase() === "save") {
      if (
        $(".page_name").val() == "" ||
        $(".page_url").val() == "" ||
        $(".shearable_link").val() == ""
      ) {
        showNoti("warning", "Kindly fill in the required fields", 4000);
        return;
      }
      /*
      This was meant to fetch the match for this record_id again
      let checkPageUrl = await checkRequestId("");
      alert(checkPageUrl);
      if (checkPageUrl == false) {
        alert("false");
      }
      if (checkPageUrl == true) {
        alert("true");
        return;
      }*/
    }

    let otherData = {
      drop_zone: $(".drop_zone").val(),
      success_page_text: $(".success_page_text").val(),
      error_page_text: $(".error_page_text").val(),
      shearable_link: $(".shearable_link").val(),
      page_url: $(".page_url").val(),
      page_name: $(".page_name").val(),
    };
    console.log(otherData, "already clicker");

    // end other input data

    const formClassElements = document.querySelectorAll(
      ".wholePage .formClass"
    );
    const EACHPAGE = document.querySelectorAll(".EACHPAGE");

    console.log("&&&&&&&&&&&&&&&&&&&&&&&", EACHPAGE);
    const formClassCount = formClassElements.length;
    const result = {
      values: {},
      preferred:
        localStorage.getItem("preferred") ||
        localStorage.getItem("edit_preferred"),
      b_token: localStorage.getItem("b_token"),
      otherData: otherData,
    };

    allArray.otherData = otherData;

    if (formClassElements.length < 2) {
      const formClassElement = document.querySelector(".wholePage .formClass");
      let pageIndex = 0;

      // JSON PAGE
      result.values["page1"] = [];
      // set global json
      allArray.values["page1"] = [];
      // console.log(result)

      // console.log('{{{{{{{{{}}}}}}}}')

      // ADD THE pageIndex TO NORMAL INDEX TO DETERMINT IF NEW PAGE
      const fieldSelectOptions = formClassElement.querySelectorAll(
        ".Field_select_option"
      );
      console.log(fieldSelectOptions);
      const fieldNames = formClassElement.querySelectorAll(".fieldName");
      const fieldCounts = formClassElement.querySelectorAll(".Field_count");
      const settingsClassMap = {
        Text: "TEXT_SETTING",
        Dropdown: "DROPDOWN_SETTING",
        File_Upload: "FILEUPLOAD_SETTING",
        Email: "EMAIL_SETTING",
        // Add more mappings as needed
      };

      fieldSelectOptions.forEach((selectOption, index) => {
        const condition = [];
        const fieldType = {};
        const conditionData = [];
        const firstCondition = [];
        const secondCondition = [];
        const settingsArray = [];
        let ins = index + 1 + pageIndex;
        console.log(`${index},${pageIndex} then the end result is ${ins}`);
        const fieldName = fieldNames[index].value;
        const fieldCount = fieldCounts[index].value;
        const selectOptionValue = selectOption.value;

        // set ins truely
        ins = fieldCount;
        // PUSH DATATYPE AND VALUE

        fieldType.fieldName = selectOptionValue;
        fieldType.fieldValue = fieldName;
        /*
          fieldType.push({
            fieldName: selectOptionValue,
            fieldValue: fieldName
          });*/

        // FIND INPUTS INSIDE OF CONDITIONS
        const conditionsLoopData = document.querySelector(
          `.CONDITIONAL_LOOP${ins}`
        );
        console.log(conditionsLoopData);

        const FirstCondition = conditionsLoopData.querySelector(
          `.FirstCondition${ins}`
        );
        const FC_correspondingSelect =
          FirstCondition.querySelectorAll(`select`);

        FC_correspondingSelect.forEach((selector) => {
          const selectorName = selector.getAttribute("name");
          const selectorValue = selector.value;
          firstCondition.push({
            selectorName: selectorName,
            selectorValue: selectorValue,
          });
        });

        const SecondCondition = conditionsLoopData.querySelector(
          `.SecondCondition${ins}`
        );
        const SC_correspondinglabel = SecondCondition.querySelectorAll(`label`);

        SC_correspondinglabel.forEach((label) => {
          const SCL_correspondingSelect = label.querySelectorAll(`select`);
          const SCL_correspondingInput = label.querySelector(`input`);
          const SCL_inputName = SCL_correspondingInput.getAttribute("name");
          const SCL_inputValue = SCL_correspondingInput.value;

          SCL_correspondingSelect.forEach((selector) => {
            const SCL_selectorName = selector.getAttribute("name");
            const SCL_selectorValue = selector.value;
            secondCondition.push({
              SCL_selectorName: SCL_selectorName,
              SCL_selectorValue: SCL_selectorValue,
            });
          });

          secondCondition.push({
            SCL_inputName: SCL_inputName,
            SCL_inputValue: SCL_inputValue,
          });
        });

        // FIND INPUTS INSIDE OF SETTINGS
        const settingsData = document.querySelectorAll(`.FIELD_SETTINGS`);
        const t2Input = document.querySelector(
          `.FIELD_SETTINGS .${settingsClassMap[selectOptionValue] + ins}`
        );
        const settingInputs = Array.from(t2Input.querySelectorAll("input"));

        if (settingsClassMap[selectOptionValue] == "DROPDOWN_SETTING") {
          const settingTextarea = t2Input.querySelector("textarea");
          inputValue = settingTextarea.value.split("\n");
          inputName = settingTextarea.getAttribute("name");
          /*
            STV.forEach((value, index) => {
              console.log(`Option ${index + 1}: ${value.trim()}`);
            });*/
          settingsArray.push({
            inputName: inputName,
            inputValue: inputValue,
          });
        }

        settingInputs.forEach((input) => {
          const inputName = input.getAttribute("name");
          let inputValue = "";
          if (input.getAttribute("type") == "checkbox") {
            const isChecked = input.checked;
            inputValue = isChecked ? "on" : "off";
            console.log("inputValue" + inputValue);
          } else {
            inputValue = input.value;
            console.log("inputValue" + inputValue);
          }

          settingsArray.push({
            inputName: inputName,
            inputValue: inputValue,
          });
        });

        if (index > 0) {
          result.values["page1"].push({
            ["field" + ins]: {
              other_data: otherData,
              fieldType: fieldType,
              fieldCount: fieldCount,
              conditions: {
                firstCondition: firstCondition,
                secondCondition: secondCondition,
              },
              settings: settingsArray,
            },
          });

          allArray.values["page1"].push({
            ["field" + ins]: {
              other_data: otherData,
              fieldType: fieldType,
              fieldCount: fieldCount,
              conditions: {
                firstCondition: firstCondition,
                secondCondition: secondCondition,
              },
              settings: settingsArray,
            },
          });
        }
        // JSON FIELDS
        else {
          result.values["page1"].push(
            {
              header: [
                {
                  edit_submit_field: $(".edit_submit_field1").val(),
                  page_header: $(".uph_1").val(),
                  page_description: $(".upd_1").val(),
                  // Add other properties as needed
                },
              ],
            },
            {
              ["field" + ins]: {
                other_data: otherData,
                fieldType: fieldType,
                fieldCount: fieldCount,
                conditions: {
                  firstCondition: firstCondition,
                  secondCondition: secondCondition,
                },
                settings: settingsArray,
              },
            }
          );

          allArray.values["page1"].push(
            {
              header: [
                {
                  edit_submit_field: $(".edit_submit_field1").val(),
                  page_header: $(".uph_1").val(),
                  page_description: $(".upd_1").val(),
                  // Add other properties as needed
                },
              ],
            },
            {
              ["field" + ins]: {
                other_data: otherData,
                fieldType: fieldType,
                fieldCount: fieldCount,
                conditions: {
                  firstCondition: firstCondition,
                  secondCondition: secondCondition,
                },
                settings: settingsArray,
              },
            }
          );
        }
      });

      console.log(result);
      console.log(allArray);
    } else {
      let storeIns = 0;
      // This else statement handles when the form contains more than one pages
      // EACH FORMCLASS Represents each PAGE
      formClassElements.forEach((formClassElement, pageInd) => {
        console.log(EACHPAGE);
        console.log(
          "Page count : ",
          EACHPAGE[pageInd].getAttribute("page-count")
        );
        let ins = 0;
        // Try to set pageind to 0 or a number
        // such that a continuous iteration will be enabled ie: 1, 2, 3, 4, 5
        let pageIndex = 0;
        if (pageInd > 0) {
          pageIndex = pageInd + 1;
        } else {
          pageIndex = 0;
        }

        // set result json
        result.values["page" + (Number(pageInd) + 1)] = [];
        // set global json
        allArray.values["page" + (Number(pageInd) + 1)] = [];
        console.log(result);

        // ADD THE pageIndex TO NORMAL INDEX TO DETERMINT IF NEW PAGE
        const fieldSelectOptions = formClassElement.querySelectorAll(
          ".Field_select_option"
        );
        const fieldNames = formClassElement.querySelectorAll(".fieldName");
        const fieldCounts = formClassElement.querySelectorAll(".Field_count");

        const settingsClassMap = {
          Text: "TEXT_SETTING",
          Dropdown: "DROPDOWN_SETTING",
          File_Upload: "FILEUPLOAD_SETTING",
          Email: "EMAIL_SETTING",
          // Add more mappings as needed
        };
        /*
        result.values['page1'+(Number(pageInd)+1)].push({
          'edit_submit_field': $('.edit_submit_field1').val(),
          'page_header': $('.uph_1').val(),
          'page_description': $('.upd_1').val(),
          // Add other properties as needed
        });
        allArray.values['page1'+(Number(pageInd)+1)].push({
          'edit_submit_field': $('.edit_submit_field1').val(),
          'page_header': $('.uph_1').val(),
          'page_description': $('.upd_1').val(),
          // Add other properties as needed
        });
      */

        fieldSelectOptions.forEach((selectOption, index) => {
          /*
          field_count gives he exact field number,so even if a deletion
          occurs it dosnt really affect the call of that field
          */

          console.log("field bettercount: ", fieldCounts[index]);
          let field_count = fieldCounts[index].value;
          if (pageIndex < 1) {
            console.log("truetrue");

            ins = storeIns + index + 1;

            console.log(`${storeIns} + 1 + ${index}`);
            console.log(ins);
          } else {
            console.log("falsefalse");
            console.log(`${index} + 1 + ${pageIndex}`);
            ins = index + 1 + pageIndex;
            storeIns = ins;
            console.log("storeIns is" + storeIns);
          }
          ins = field_count;
          const condition = [];
          const fieldType = {};
          const conditionData = [];
          const firstCondition = [];
          const secondCondition = [];
          const settingsArray = [];

          const fieldName = fieldNames[index].value;
          const fieldCount = fieldCounts[index].value;
          const selectOptionValue = selectOption.value;

          // PUSH DATATYPE AND VALUE

          fieldType.fieldName = selectOptionValue;
          fieldType.fieldValue = fieldName;
          /*  
          fieldType.push({
              fieldName: selectOptionValue,
              fieldValue: fieldName
            });
          */

          // FIND INPUTS INSIDE OF CONDITIONS

          const conditionsLoopData = document.querySelector(
            `.CONDITIONAL_LOOP${ins}`
          );
          const FirstCondition = conditionsLoopData.querySelector(
            `.FirstCondition${ins}`
          );
          const FC_correspondingSelect =
            FirstCondition.querySelectorAll(`select`);

          FC_correspondingSelect.forEach((selector) => {
            const selectorName = selector.getAttribute("name");
            const selectorValue = selector.value;
            firstCondition.push({
              selectorName: selectorName,
              selectorValue: selectorValue,
            });
          });

          const SecondCondition = conditionsLoopData.querySelector(
            `.SecondCondition${ins}`
          );
          const SC_correspondinglabel =
            SecondCondition.querySelectorAll(`label`);

          SC_correspondinglabel.forEach((label) => {
            const SCL_correspondingSelect = label.querySelectorAll(`select`);
            const SCL_correspondingInput = label.querySelector(`input`);
            const SCL_inputName = SCL_correspondingInput.getAttribute("name");
            const SCL_inputValue = SCL_correspondingInput.value;

            SCL_correspondingSelect.forEach((selector) => {
              const SCL_selectorName = selector.getAttribute("name");
              const SCL_selectorValue = selector.value;
              secondCondition.push({
                SCL_selectorName: SCL_selectorName,
                SCL_selectorValue: SCL_selectorValue,
              });
            });

            secondCondition.push({
              SCL_inputName: SCL_inputName,
              SCL_inputValue: SCL_inputValue,
            });
          });

          // FIND INPUTS INSIDE OF SETTINGS
          const settingsData = document.querySelectorAll(`.FIELD_SETTINGS`);
          const t2Input = document.querySelector(
            `.FIELD_SETTINGS .${settingsClassMap[selectOptionValue] + ins}`
          );
          const settingInputs = Array.from(t2Input.querySelectorAll("input"));
          // let STV = ''
          if (settingsClassMap[selectOptionValue] == "DROPDOWN_SETTING") {
            const settingTextarea = t2Input.querySelector("textarea");
            inputValue = settingTextarea.value.split("\n");
            inputName = settingTextarea.getAttribute("name");
            /*
            STV.forEach((value, index) => {
              console.log(`Option ${index + 1}: ${value.trim()}`);
            });*/
            settingsArray.push({
              inputName: inputName,
              inputValue: inputValue,
            });
          }

          console.log("timeing....");
          console.log(t2Input);

          settingInputs.forEach((input, index) => {
            const inputName = input.getAttribute("name");
            let inputValue = "";
            if (input.getAttribute("type") == "checkbox") {
              const isChecked = input.checked;
              inputValue = isChecked ? "on" : "off";
              //console.log(input)
              //console.log('sssssssssssssssssssssssssssssssss')
              //console.log('index'+index)
              //console.log(settingsClassMap[selectOptionValue]+ins)
              //console.log('inputValue'+inputValue)
            } else {
              inputValue = input.value;
              console.log("inputValue" + inputValue);
            }

            settingsArray.push({
              inputName: inputName,
              inputValue: inputValue,
            });
          });

          console.log(settingsArray);
          if (index > 0) {
            result.values["page" + (Number(pageInd) + 1)].push({
              ["field" + ins]: {
                other_data: otherData,
                fieldType: fieldType,
                fieldCount: fieldCount,
                conditions: {
                  firstCondition: firstCondition,
                  secondCondition: secondCondition,
                },
                settings: settingsArray,
              },
            });

            allArray.values["page" + (Number(pageInd) + 1)].push({
              ["field" + ins]: {
                other_data: otherData,
                fieldType: fieldType,
                fieldCount: fieldCount,
                conditions: {
                  firstCondition: firstCondition,
                  secondCondition: secondCondition,
                },
                settings: settingsArray,
              },
            });
          }
          // JSON FIELDS
          else {
            result.values["page" + (Number(pageInd) + 1)].push(
              {
                header: [
                  {
                    edit_submit_field: $(
                      `.edit_submit_field${Number(pageInd) + 1}`
                    ).val(),
                    page_header: $(`.uph_${Number(pageInd) + 1}`).val(),
                    page_description: $(`.upd_${Number(pageInd) + 1}`).val(),
                    // Add other properties as needed
                  },
                ],
              },
              {
                ["field" + ins]: {
                  other_data: otherData,
                  fieldType: fieldType,
                  fieldCount: fieldCount,
                  conditions: {
                    firstCondition: firstCondition,
                    secondCondition: secondCondition,
                  },
                  settings: settingsArray,
                },
              }
            );

            allArray.values["page" + (Number(pageInd) + 1)].push(
              {
                header: [
                  {
                    edit_submit_field: $(
                      `.edit_submit_field${Number(pageInd) + 1}`
                    ).val(),
                    page_header: $(`.uph_${Number(pageInd) + 1}`).val(),
                    page_description: $(`.upd_${Number(pageInd) + 1}`).val(),
                    // Add other properties as needed
                  },
                ],
              },
              {
                ["field" + ins]: {
                  other_data: otherData,
                  fieldType: fieldType,
                  fieldCount: fieldCount,
                  conditions: {
                    firstCondition: firstCondition,
                    secondCondition: secondCondition,
                  },
                  settings: settingsArray,
                },
              }
            );
          }

          console.log(allArray);

          return;
        });
      });

      // downloadJson(result)
    }

    if (e.innerText && e.innerText.toLowerCase() === "update") {
      window.showModal3 = true;
      saveOrganizedform_("update");
    } else if (e.innerText && e.innerText.toLowerCase() === "save") {
      window.showModal3 = true;
      saveOrganizedform_("save");
    } else if (e === "preview") {
      // save allArray in a localstorage
      localStorage.setItem("previewAllArray", JSON.stringify(allArray));
      window.open(`${baseUrl}/form/preview`);
    } else {
      // CHECK OF OPTION SELECTED WAS GOOGLE DRIVE OR SOMETHING ELSE
    }
  }
</script>
<!-- <script src="../../js/formBuilder/dragNdrop.js"></script> -->
