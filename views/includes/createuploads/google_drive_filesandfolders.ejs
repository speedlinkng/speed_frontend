<div>
  <template x-teleport="#x-teleport-target">
    <div
      class="p-5 fixed h-screen inset-0 z-[100] flex flex-col items-center justify-center px-4 py-6 sm:px-5"
      x-show="showModal3"
      role="dialog"
      @keydown.window.escape="showModal3 = false"
    >
      <div
        class="p-3 fixed inset-0 bg-slate-900/60 backdrop-blur-sm transition-opacity duration-300"
        x-show="showModal3"
        x-transition:enter="ease-out"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
      ></div>
      <div
        class="border relative overflow-y-scroll h-fit max-w-3xl w-full rounded-lg bg-white px-4 pb-4 transition-all duration-300 dark:bg-navy-700 sm:px-5"
        x-show="showModal3"
        x-transition:enter="easy-out"
        x-transition:enter-start="opacity-0 [transform:translate3d(0,-1rem,0)]"
        x-transition:enter-end="opacity-100 [transform:translate3d(0,0,0)]"
        x-transition:leave="easy-in"
        x-transition:leave-start="opacity-100 [transform:translate3d(0,0,0)]"
        x-transition:leave-end="opacity-0 [transform:translate3d(0,-1rem,0)]"
      >
        <div class="p-2">
          <div>
            <div
              class="h-16 p-2 border-slate-300 dark:border-navy-500 mb-1 flex justify-start items-center"
            >
              <h3 class="font-bold text-2xl !text-black">Google Drive</h3>
            </div>

            <div
              class="card border border-slate-300 dark:border-navy-500 min-h-40 text-sm p-2 choose_Folder"
            >
              <p class="text-xs !text-black">
                Write or choose the folder with which you want all your files to
                be stored inside
              </p>
              <label class="block mt-2">
                <span class="font-semibold">Destination Folder</span>
                <span class="relative mt-2 flex">
                  <input
                    id="chosen_folder_idd"
                    class="choose_Folder_id hidden form-input peer w-full rounded-lg border border-slate-300 bg-transparent px-3 py-2 pl-2 placeholder:text-slate-400/70 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent"
                    placeholder=""
                    value=""
                    type="text"
                  />

                  <input
                    id="chosen_folder"
                    class="choose_Folder_input form-input peer w-full rounded-lg border border-slate-300 bg-transparent px-3 py-2 pl-9 placeholder:text-slate-400/70 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent"
                    placeholder="Speedlink"
                    value="Speedlink"
                    type="text"
                    id="create_folder"
                  />

                  <button
                    onclick=" createPicker()"
                    class="choose_Folder_button google_select_button btn ml-2 space-x-2 bg-primary font-medium text-white hover:bg-primary-focus focus:bg-primary-focus active:bg-primary-focus/90 dark:bg-accent dark:hover:bg-accent-focus dark:focus:bg-accent-focus dark:active:bg-accent/90"
                  >
                    <span>Select</span>
                    <i class="bi bi-google"></i>
                  </button>
                </span>
              </label>
            </div>
            <br />

            <div
              class="card border border-slate-300 dark:border-navy-500 h-auto text-sm p-2"
            >
              <h4 class="text-sm !text-black font-semibold">
                Automatically organise your files
              </h4>
              <p class="text-xs !text-">
                You can create subfolders based on your form responses. Kindly
                note that the options available to you are options of fields
                with mandatory/required option, to avoid errors.
              </p>

              <div class="gfb text-base mt-2"></div>
            </div>
            <br />

            <% if(data.plan == 2){ %>
            <div
              class="card border border-slate-300 dark:border-navy-500 h-auto text-sm p-2"
            >
              <h4 class="!text-black font-semibold">Expiry Date</h4>
              <p class="text-xs">
                Set the time with which you want this form link to expire. <p onclick="addTime()">test Add</p>
              </p>
              <label class="relative flex">
                <input
                  id="expiry_time"
                  x-init="$el._x_flatpickr =
                flatpickr($el,{enableTime: true,minTime: '16:00',maxTime:
                '22:00'})"
                  class="form-input peer w-full rounded-lg border border-slate-300 bg-transparent px-3 py-2 pl-9 placeholder:text-slate-400/70 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent"
                  placeholder="Choose datetime..."
                  type="text"
                />
                <span
                  class="pointer-events-none absolute flex h-full w-10 items-center justify-center text-slate-400 peer-focus:text-primary dark:text-navy-300 dark:peer-focus:text-accent"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    fill="none"
                    viewbox="0 0 24 24"
                    stroke="currentColor"
                    stroke-width="1.5"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                    />
                  </svg>
                </span>
              </label>
            </div>
            <br />
            <% }else{ %>
            <div
              class="card border rounded-md border-slate-300 dark:border-navy-500 h-auto text-sm p-2 bg-error"
            >
              <h4 class="!text-slate-100 font-semibold">Expiry Date</h4>
              <p class="text-xs !text-slate-100">
                This form link will automatically expire after 1 day.
                <a
                  class="border-b cursor-pointer"
                  onclick=" setActiveItem('Plan')"
                  >Upgrade to plus</a
                >
                to set your expiry date.
              </p>
            </div>
            <br />
            <% } %>
            <div
              class="card border border-slate-300 dark:border-navy-500 h-auto text-sm p-2"
            >
              <h4 class="!text-black font-semibold">Other Settings</h4>
              <p class="text-xs !text-">
                Save form field as a text file in my drive
              </p>
              <p class="text-xs mt-2 text-primary">
                Click this checkbox to receive your replies as a text file in
                the google drive folder you selected
              </p>
              <label class="py-3 grid items-center grid-cols-9">
                <input
                  id="replyAsText"
                  name="replyAsText"
                  class="col-span-4 border required-checkbox${count} form-checkbox is-basic h-5 w-5 rounded bg-slate-100 border-slate-400/70 checked:!bg-success checked:!border-success hover:!border-success focus:!border-success dark:bg-navy-900 dark:border-navy-500"
                  type="checkbox"
                />
              </label>
            </div>

            <div class="flex justify-start items-center mt-2 space-x-2">
              <button
                @click="saveOrganizedform"
                id="saveOrganized"
                class="hidden btn h-10 bg-primary font-medium text-white hover:bg-primary-focus focus:bg-primary-focus active:bg-primary-focus/90 dark:bg-accent dark:hover:bg-accent-focus dark:focus:bg-accent-focus dark:active:bg-accent/90"
              >
                Save
              </button>
              <button
                @click="updateOrganizedform"
                id="updateOrganized"
                class="hidden btn h-10 bg-primary font-medium text-white hover:bg-primary-focus focus:bg-primary-focus active:bg-primary-focus/90 dark:bg-accent dark:hover:bg-accent-focus dark:focus:bg-accent-focus dark:active:bg-accent/90"
              >
                Update
              </button>
              <button
                @click="setOrganizedForm"
                id="setOrganizedForm"
                class="btn opa  h-10 bg-primary hidden font-medium text-white hover:bg-primary-focus focus:bg-primary-focus active:bg-primary-focus/90 dark:bg-accent dark:hover:bg-accent-focus dark:focus:bg-accent-focus dark:active:bg-accent/90"
              >
                Set
              </button>
              <button
                @click="showModal3 = false"
                class="btn h-10 border border-error font-medium text-error hover:bg-error hover:text-white focus:bg-error focus:text-white active:bg-error/90"
              >
                Cancel
              </button>
            </div>
          </div>

          <div></div>
        </div>
      </div>
    </div>
  </template>
</div>

<!-- <script src="../../js/selectFolder.js"></script> -->
<!-- Load Google API Loader script -->
<script
  async
  defer
  src="https://apis.google.com/js/api.js"
  onload="onApiLoad()"
></script>
<script
  async
  defer
  src="https://accounts.google.com/gsi/client"
  onload="gisLoaded()"
></script>



<script>
  function addTime(){
    alert('time added')
    alert($("#expiry_time").val())
    $("#expiry_time").val('05/26/2024 10:12 AM');
  }
</script>

<script>
  var storedEditData;
  function setFoldersAndId() {
    if (
      localStorage.getItem("preferred") == 0 ||
      storedEditData?.preferred == 0
    ) {
      let email_ = "<%= data.email %>";
      let element = document.querySelector("#chosen_folder");
      element.value = email_;

      console.log(document.querySelector("#chosen_folder"));
      console.log("[[[[[[[[[[[]]]]]]]]]]]");
      // Define a read-only id property
      /* Object.defineProperty(element, 'id', {
          value: 'chosen_folder',
          writable: false // Make the property read-only
        });
        element.readOnly = true;
      */
    } else if (localStorage.getItem("preferred") == 1) {
      // $('#chosen_folder').val('speedlink')
    }
  }
  setTimeout(function () {
    setFoldersAndId();
  }, 3000);

  async function setOrganizedForm() {
    const storedEditDataJson = localStorage.getItem("edit_data");
    console.log(storedEditDataJson);

    var storedEditData;
    if (localStorage.getItem("editting") === "true") {
      await setFoldersAndId();
      storedEditData = JSON.parse(storedEditDataJson);
    }
    console.log("all array values log: ", allArray.values);

    // Check if 'filesandFolder' already exists
    if (allArray.values && typeof allArray.values === "object") {
      // Check if 'filesandFolder' exists inside 'values'

      console.log(allArray.values);

      if (
        "filesandFolder" in allArray.values ||
        localStorage.getItem("editting") === "true"
      ) {
        // 'afilesandFolder' exists, retrieve information

        //  Do something with the retrieved information
        //  console.log("Chosen Folder:", chosen_folder);
        //  console.log("Folder ID:", folder_id);
        //  console.log("Group By:", group_by);
        //  console.log("Other Settings:", other_settings);
        //  console.log('ccccccccccccccchhhhhhhhhhhhheeeeeeeeeeeeecccccccccck')

        //  Populate fields
        //  $('.selectField').val('')
        //  alert(storedEditData?.folderId);
        // set choose_Folder section to disabled
        $(".choose_Folder").addClass("bg-slate-100 opacity-70");

        $(".choose_Folder_button").addClass("hidden");

        $(".choose_Folder_button").prop("disabled", true);

        $(".choose_Folder_input").prop("readonly", true);

        if (localStorage.getItem("editting") === "true") {
          $("#chosen_folder_idd").val(storedEditData.folderId);
          $("#chosen_folder").val(storedEditData.chosenFolder);
          $("#expiry_time").val(storedEditData.expiryTime);
        } else {
          let { chosen_folder, folder_id, group_by, other_settings } =
            allArray.values.filesandFolder;
          $("#chosen_folder_idd").val(folder_id);
          $("#chosen_folder").val(chosen_folder);
          $("#expiry_time").val("");
        }
      } else {
        $(".gfb").html("");
        // 'afilesandFolder' does not exist, perform some action
        console.log("filesandFolder does not exist. Performing some action...");
      }
    } else {
      console.error("values does not exist or is not an object.");
    }

    $(".gfb").html("");
    // Create the select element
    let $_select = `
        <label class="block">
          <span class="pl-1 font-semibold text-sm">Group files by</span>
          <select class="selectField mt-1 w-full px-1 py-2" multiple placeholder="Select group field" autocomplete="off" x-init="$el._tom = new Tom($el,{ plugins: ['remove_button'],create: true,sortField: {field: 'text',direction: 'asc'}})">
          </select>
        </label>
      `;

    $(".gfb").append($_select);

    // Get the select element
    let $select = $(".selectField");

    Object.keys(allArray.values).forEach((pageName) => {
      allArray.values[pageName].forEach((field, fieldCount) => {
        const fieldName = Object.keys(field)[0];

        // this if condition is to ensure header{} on the zeroth index dosnt affect
        if (fieldCount > 0) {
          console.log(fieldName);
          console.log(fieldCount);
          const fieldData = field[fieldName];
          const isRequired = fieldData.settings.some(
            (setting) =>
              setting.inputName === "Required" && setting.inputValue === "on"
          );

          if (isRequired) {
            // Append the option to the select element
            $select.append(
              `<option value="${fieldData.fieldType.fieldValue}">${fieldData.fieldType.fieldValue}</option>`
            );
          }
        }
      });
    });

    // auto add options data for select field
    /*  let dataFields = [];

    dataFields.forEach((fieldValue_) => {
      $select.append(`<option value="${fieldValue_}">${fieldValue_}</option>`);
    });

    // auto select data for select field if edit is true
    let selectElement = document.querySelector(".selectField");
    for (let i = 0; i < dataFields.length; i++) {
      let option = selectElement.options[i];
      if (dataFields.includes(option.value.toLowerCase())) {
        option.selected = true;
      }
    }
    // End auto select*/
  }

  function saveOrganizedform() {
    // First check if this user is and Admin or just a normal user
    let userRole = "<%= data.role %>";
    if (userRole == "admin") {
      showNoti(
        "error",
        "You cannot submit a for , youre and administrator ",
        5000
      );
      return;
    }

    // NOW save the new data entry inside resulte array and ALLARRAY.
    console.log($("#replyAsText").val());
    RAS = $("#replyAsText").val();
    const RASChecked = RAS.checked ? "on" : "off";
    console.log(RASChecked);
    console.log($(".selectField").val());
    console.log($("#chosen_folder_idd").val());

    console.log($("#chosen_folder").val());

    let newDataset = {
      chosen_folder: $("#chosen_folder").val(),
      folder_id: $("#chosen_folder_idd").val(),
      group_by: $(".selectField").val(),
      other_settings: {
        replyAsText: RASChecked,
      },
    };

    allArray.filesandFolder = newDataset;

    console.log(allArray);

    // NOW SAVE TO DATABASE
    async function saveThisForm() {
      let ex_time = document.querySelector("#expiry_time").value;
      if (ex_time != "") {
        ex_time = ex_time;
      } else {
        ex_time = null;
      }
      const requestData = {
        allArray: allArray,
        expiry_time: ex_time,
      };
      let settings = {
        method: "POST",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("access")}`,
          "Content-Type": "application/json; charset=UTF-8",
        },

        body: JSON.stringify(requestData),
      };

      console.log(settings);

      const saveButton = document.getElementById("saveOrganized");

      saveButton.innerText = "Saving...";
      saveButton.disabled = true;
      saveButton.classList.add("cursor-wait");
      saveButton.classList.add("bg-opacity-40");

      try {
        let fetchResponses = await fetch(
          `${backendUrl}/api/app/create`,
          settings
        );
        let stta = await fetchResponses.status;
        let json = await fetchResponses.json();

        if (json.status == 200) {
          localStorage.setItem("upload_id", json.id);
          showNoti(
            "success",
            "Your form request has been submitted successfully",
            5000
          );
          setTimeout(function () {
            saveButton.innerText = "Save";
            saveButton.disabled = false;
            saveButton.classList.remove("cursor-wait");
            saveButton.classList.remove("bg-opacity-40");
          }, 4000);
          setTimeout(function () {
            window.location.href = `${baseUrl}/dash`; // redirect to dash, the user will find option to share or copy link address from the dashboard
          }, 5000);
        } else {
          console.log("Going to Login", json.status);
        }
      } catch (e) {
        console.log(e);
      } finally {
        setTimeout(function () {
          saveButton.innerText = "Save";
        }, 4000);
      }
    }

    saveThisForm();
  }

  function updateOrganizedform() {
    // NOW save the new data entry inside resulte array and ALLARRAY.
    console.log($("#replyAsText").val());
    RAS = $("#replyAsText").val();
    const RASChecked = RAS.checked ? "on" : "off";
    console.log(RASChecked);
    console.log($(".selectField").val());
    console.log($("#chosen_folder_idd").val());
    console.log($("#chosen_folder").val());

    let newDataset = {
      chosen_folder: $("#chosen_folder").val(),
      folder_id: $("#chosen_folder_idd").val(),
      group_by: $(".selectField").val(),
      other_settings: {
        replyAsText: RASChecked,
      },
    };

    allArray.filesandFolder = newDataset;

    // Log the modified JSON for verification
    // console.log(JSON.stringify(allArray, null, 2));

    // NOW SAVE TO DATABASE
    async function updateThisForm() {
      let ex_time = document.querySelector("#expiry_time").value;
      if (ex_time != "") {
        ex_time = ex_time;
      } else {
        ex_time = null;
      }
      let settings = {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("access")}`,
          "Content-Type": "application/json; charset=UTF-8",
        },
        body: JSON.stringify({

          allArray: allArray,
          record_id: editFormRecordId,
          expiry_time: ex_time,
        }),
      };

      const updateButton = document.getElementById("updateOrganized");

      updateButton.innerText = "Updating...";

      try {
        let fetchResponses = await fetch(
          `${backendUrl}/api/app/update`,
          settings
        );
        let stta = await fetchResponses.status;
        let json = await fetchResponses.json();

        if (json.status == 200) {
          localStorage.removeItem('edit_preferred')
          localStorage.setItem("upload_id", json.id);
          showNoti(
            "success",
            "Your form request has been updated successfully",
            4000
          );
          setTimeout(function () {
            updateButton.innerText = "Update";
          }, 1000);
          setTimeout(function () {
            window.location.href = `${baseUrl}/dash`; // redirect to dash, the user will find option to share or copy link address from the dashboard
          }, 5000);
        } else {
          console.log("Going to Login", json.status);
        }
      } catch (e) {
        console.log(e);
      } finally {
        setTimeout(function () {
          updateButton.innerText = "Update";
        }, 1000);
      }
    }

    updateThisForm();
  }
</script>
