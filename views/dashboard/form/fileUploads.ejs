<template
  x-data="fileUpload"
  x-if="field.fieldType && field.fieldType.fieldName === 'File_Upload'"
>
  <section>
    <div
      x-data="{thisFile:'', keyComb:''+pageKey+''+fieldKey+'', conditionValue:'', error:[{validation:false, required:false, message:''}], completeCondition:[], showLabel: true, _if:'all', _matches:[], _conditions:[], _conditionsWord:[], _compared:[]}"
    >
      <!-- IMAGE SECTION  -->
      <div class="mt-3" id="image_section" style="display: block">
        <input class="FU_filekey hidden" :value="'filepond' +pageKey" />

        <template x-for="(set, index) in setting">
          <input
            x-init="fileSettings[keyComb] = fileSettings[keyComb] || []; fileSettings[keyComb].push({ [set.inputName]: set.inputValue })"
            class="hidden"
            x-bind:class="'FU_'+(set.inputName ? set.inputName.replace(/\s/g, '').replace(/[()]/g, '') : '')"
            :value="set.inputValue"
          />
        </template>

        <!-- CONDITIONS -->

        <template
          x-if="Object.entries(condition)[0][0] === 'firstCondition'"
          x-init="console.log()"
        >
          <div>
            <!-- <div x-text="Object.keys(conditionType[1]).length"></div> -->
            <template
              x-for="(con, conIndex) in Object.entries(condition)[0][1]"
            >
              <div>
                <template x-if="con.selectorName === 'hide-show'">
                  <div
                    class="hidden"
                    x-text="con.selectorValue"
                    x-init=" showLabel = con.selectorValue === 'Hide';"
                  ></div>
                </template>
                <template x-if="con.selectorName === 'if'">
                  <div
                    class="hidden"
                    x-text="con.selectorValue"
                    x-init=" _if = con.selectorValue;"
                  ></div>
                </template>
              </div>

              <!-- <div class="border"  x-text="con.selectorValue" x-init="con.selectorName === 'hide-show' ? showLabel = con.selectorValue === 'show' : null; // console.log(showLabel);"></div> -->
            </template>
          </div>
        </template>

        <template
          x-init=" console.log(Object.entries(condition)[1][1])"
          x-if="Object.entries(condition)[1][0] === 'secondCondition'"
        >
          <div>
            <!-- <div x-text="Object.keys(conditionType[1]).length"></div> -->
            <template
              x-for="(con, conIndex) in Object.entries(condition)[1][1]"
            >
              <div
                x-init=" console.log((Object.entries(condition)[1][1].length)/3)"
              >
                <div
                  class="mt-"
                  x-data="{ countcondition: 0 }"
                  x-init="countcondition = Math.floor(conIndex / 3) + 1"
                >
                  <template x-if="con.SCL_selectorName === 'matches'">
                    <div
                      :class="con.SCL_selectorName+conIndex"
                      class="hidden"
                      x-init="_matches.push(con.SCL_selectorValue)"
                    ></div>
                  </template>
                  <template x-if="con.SCL_selectorName === 'condition'">
                    <div
                      :class="con.SCL_selectorName+conIndex"
                      class="hidden"
                      x-init="conditionPush(con.SCL_selectorValue, _conditions, _conditionsWord)"
                    ></div>
                  </template>
                  <template x-if="con.SCL_inputName === 'compared'">
                    <div
                      :class="con.SCL_inputName+conIndex"
                      class="hidden"
                      x-init="comparedPush(con.SCL_inputValue, _compared, _conditionsWord, countcondition)"
                    ></div>
                  </template>

                  <template x-if="conIndex % 3 === 2">
                    <div
                      x-init="checkFor(countcondition, fieldType.fieldValue+keyComb, _matches, _conditions, _compared)"
                    ></div>
                  </template>
                </div>
              </div>
            </template>

            <div class="hidden">
              <div x-text="JSON.stringify(_matches)"></div>
              <div x-text="JSON.stringify(_conditions)"></div>
              <div x-text="JSON.stringify(_compared)"></div>
            </div>

            <!-- Auto click to check if conditions have been mt -->
            <input
              :value="_if"
              :class="((fieldType.fieldValue+keyComb).replace(/\s/g, ''))"
              class="hidden"
            />
            <input
              :value="conditionValue"
              @click="autoClick(showLabel, (fieldType.fieldValue+keyComb).replace(/\s/g, ''))"
              :id="((fieldType.fieldValue+keyComb).replace(/\s/g, ''))"
              class="hidden"
            />
          </div>
        </template>

        <div
          x-show="showLabel"
          x-bind:data-pointId="field.fieldCount"
          class="filepond relative fp-bordered fp-grid mt-1.5 [--fp-grid:2]"
        >
          <div class="flex" style="font-weight: 500">
            <span
              :class="'Namefield'+keyComb"
              x-text="(fieldType.fieldValue).charAt(0).toUpperCase() + (fieldType.fieldValue).slice(1)"
              class="first-letter-capital text-sm"
              >Images</span
            >
            <span
              x-bind:class="setting.find(item => item.inputName === 'Required' && item.inputValue === 'on') ? 'block' : 'hidden'"
              class="text-red-400 ml-1"
              >*</span
            >
          </div>
          <input
            type="file"
            class="files mt-1.5 text-xs"
            name="file"
            :id="'filepond'+keyComb"
            x-init="startFilePond(('filepond'+keyComb),keyComb)"
          />
          <div
            x-show="watermark_div"
            class="absolute right-0 bg-white z-50 min-h-4 h-4 -mt-3 w-[35%]"
          ></div>
          <span
            :class="'description'+keyComb"
            x-text="(setting.find(item => item.inputName === 'Description') || {}).inputValue || ''"
            class="capitalize absolute h-fit w-[65%] left-0 -mt-3 text-tiny+ text-slate-400 dark:text-navy-300 sm:w-[50%]"
            >This is a help text</span
          >
          <!-- This is a trigger button click to start uploading this particular file to google drive -->
          <button
            :id="'FileButtonClickfield'+keyComb"
            id=""
            class="uploadToDrive hidden"
            @click="uploadToDrive()"
          >
            Upload to Drive
          </button>

          <button
            id=""
            class="fielTofield text-black hidden"
            @click="fielTofield(field.fieldCount)"
          >
            file to field
          </button>
          <br />
        </div>
      </div>

      <!-- Store the name of the file uploaded here -->
      <input
        x-bind:data-pointId="field.fieldCount"
        x-bind:class="'field'+keyComb"
        name="file"
        value=""
        class="hidden"
      />

      <!-- if required -->
      <input
        type=""
        class="hidden"
        x-bind:class="'uploadsfield'+keyComb"
        x-bind:value="setting.find(item => item.inputName === 'Required' && item.inputValue === 'on') ? 'true' : 'false'"
      />
      <!-- if file is present -->
      <input
        x-bind:data-fieldName="(fieldType.fieldValue).charAt(0).toUpperCase() + (fieldType.fieldValue).slice(1)"
        class="hidden"
        x-bind:id="'filePresentfield'+keyComb"
        x-bind:value="thisFile"
      />
    </div>
  </section>
</template>

<script>
  Alpine.data("fileUpload", () => ({
    pond: "",
    renameAs: "",

    startFilePond(filekey, keyComb) {
      let FQ;
      let maxFile;
      let drop_zone;

      FQ =
        this.fileSettings[keyComb].find((item) =>
          item.hasOwnProperty("File Quantity")
        )["File Quantity"] || "1";
      maxFile =
        this.fileSettings[keyComb].find((item) =>
          item.hasOwnProperty("Max File Size (MB)")
        )["Max File Size (MB)"] || "50";

      if (
        $(".drop_zone").text() !== "" ||
        $(".drop_zone").text() !== undefined
      ) {
        drop_zone = $(".drop_zone").text();
      } else {
        drop_zone = "drop all your files here";
      }

      const inputElements = document.getElementById(filekey);
      // Initialize FilePond
      this.pond = FilePond.create(inputElements, {
        allowMultiple: true,
        instantUpload: true,
        allowProcess: false,
        dropOnPage: true,
        maxFiles: parseInt(FQ),
        // Maximum number of files allowed
        maxFileSize: maxFile + "MB", // Maximum file size allowed
        allowReplace: true,
        required: true, // Require at least one file to be added (true/false)
        styleFilePanelMaxHeight: "70px", // Maximum height of the file panel
        acceptedFileTypes: ["image/*", "application/pdf"], // Array of accepted file types
        labelIdle:
          '<span style="font-size:11px;" >' +
          drop_zone +
          '</span> or <span style="font-size:11px;" class="filepond--label-action"> Browse </span>', // Custom label when no files are selected
        // Configuration options go here
      });

      // set fileLabel
      this.fileLabel.push(
        document.querySelector(`.Namefield${keyComb}`).innerText
      );

      // Listen for the 'addfile' event
      this.pond.on("addfile", (error, file) => {
        if (!error) {
          const firstFile = file;
          console.log(firstFile.fileExtension);
          this.thisFile = this.pond.getFiles().length;

          // Assuming keyComb and fileSettings are defined elsewhere
          this.renameAs =
            this.fileSettings[keyComb]
              .find((item) => item.hasOwnProperty("Rename File As"))
              ["Rename File As"].trim() + `.${firstFile.fileExtension.trim()}`; // Access fileExtension directly
          console.log("rename", this.renameAs.trim());
        } else {
          // Handle the error
          console.error("Error adding file:", error);
        }
      });

      // Listen for the 'removefile' event
      this.pond.on("removefile", (error, file) => {
        if (!error) {
          console.log("File removed:", file.filename);
          this.thisFile = this.pond.getFiles().length;
        } else {
          // Handle the error
          console.error("Error removing file:", error);
        }
      });
    },

    async saveRepliesToDrive() {
      console.log("saveRepliesToDrive ee");
      const downlaodToDoc = document.querySelector(`#downloadToDoc`);
      downlaodToDoc.click();
    },

    // Find the input element
    async fielTofield(fieldCount) {
      var uploadFolderId_ = this.uploadFolderId;
      // alert(this.preFileName)
      const fd = new FormData();
      const uploadedFiles = this.pond.getFiles();
      console.log(uploadedFiles);
      if (!uploadedFiles) {
        return;
      }

      //  alert(uploadedFiles.length);
      if (uploadedFiles.length > 1) {
        for (var a = 0; a < this.fileLabel.length; a++) {
          let data = {
            fieldCount: fieldCount,
            label: this.fileLabel[this.ii],
            time: uploadedFiles[a].source.lastModified,
            name: uploadedFiles[a].source.name,
          };
          this.fileSourceName.push(data);
        }
      } else if (uploadedFiles.length == 0) {
        console.log("No image to use");
      } else {
        let data = {
          fieldCount: fieldCount,
          label: this.fileLabel[this.ii],
          time: uploadedFiles[0].source.lastModified,
          name: uploadedFiles[0].source.name,
        };
        this.fileSourceName.push(data);
      }

      console.log("file to field");
    },

    async uploadToDrive() {
      console.log(this.fileLabel);
      console.log("upload to drive");
      var uploadFolderId_ = this.uploadFolderId;
      var preFileName = this.preFileName;
      $("#add_progressbar").html("");
      const fd = new FormData();
      const uploadedFiles = this.pond.getFiles();
      this.allUploadedFiles = uploadedFiles.length + this.allUploadedFiles;

      console.log(
        "files length for:" + this.countDownUpload + " ->" + uploadedFiles
      );
      if (uploadedFiles.length == 0) {
        this.ensureOnce += 1;

        console.log(this.ensureOnce + "== " + this.ensure);
        if (this.ensureOnce == this.ensure) {
          this.saveRepliesToDrive();
        }
        return;
      }

      const startFileProcessing = async (
        uploadedFile,
        i_,
        countDownUpload,
        randomId
      ) => {
        return new Promise((resolve) => {
          // BLOB
          let selectedFile = uploadedFile.source;

          // Resume an upload after it failed due to network issues
          const checkResume = async (header_res, size) => {
            let url = "";
            let range = "";

            resume();

            const resume = async () => {
              if (navigator.onLine) {
                if (localStorage.getItem("loc_url") !== null) {
                  url = header_res;
                }
                // console.log('url' + url)

                try {
                  const response = await fetch(header_res, {
                    method: "PUT",
                    headers: {
                      "Content-Range": `bytes */${size}`,
                      "Content-Length": "0",
                    },
                  });
                  let status_ = await response.status;
                  let headers = await response.headers.get("range");

                  // console.log(status_)
                  // console.log(headers)
                  if (headers == null) {
                    range = null;
                    uploadfile(url, selectedFile, range);
                  }
                  if (status_ == 308) {
                    let ranges = headers;
                    let parts = ranges.split("-");
                    if (parts.length === 2) {
                      range = parts[1];
                    } else {
                      // console.log('Invalid format');
                    }
                    // console.log('new range is:' + range)
                    uploadfile(url, selectedFile, range);
                    clearInterval(intervalId);
                  }

                  if (status_ == 200) {
                    updateProgressBar("complete");
                    // console.log('upload complete')
                    clearInterval(intervalId);
                  }
                  clearInterval(intervalId);
                } catch (err) {
                  // console.log(err)
                }
              } else {
                // console.log('You are offline.');
              }
            };
          };

          // GET GOOGLE LOCATION URL FOR THIS FILE UPLOAD
          const getlocations = async (selectedFile) => {
            // console.log('SLECTED FILE' + selectedFile)
            let useName = "file_name";
            if (this.renameAs.trim().startsWith(".")) {
              useName = selectedFile.name;
            } else {
              useName = this.renameAs.trim();
            }
            console.log("useName", useName);
            let accssToken = "<%= uploadToken %>";
            try {
              const folderId = uploadFolderId_; // Replace with the actual folder ID

              let accssToken = "<%= uploadToken %>";
              console.log(this.renameAs.trim(), "TRIM");
              console.log(selectedFile.name, "select name");
              console.log(preFileName, "pref name");

              // Step 1: Initiate the resumable session
              const initiateResponse = await fetch(
                "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable",
                {
                  method: "POST",
                  headers: {
                    Authorization: `Bearer ${accssToken}`,
                    "Content-Type": "application/json; charset=UTF-8",
                  },
                  body: JSON.stringify({
                    name: `${preFileName}${useName}`, // RENAME FILE HERE
                    mimeType: selectedFile.type,
                    parents: [folderId], // Place the folder ID in an array
                  }),
                }
              );

              // console.log(initiateResponse)
              if (initiateResponse.status === 200) {
                const header_res = await initiateResponse.headers.get(
                  "location"
                );
                let status = await initiateResponse.status;
                localStorage.setItem("loc_url", header_res);

                if (header_res != null) {
                  uploadfile(header_res, selectedFile);
                }
              } else {
                // console.error('Failed to initiate the resumable session.');
              }
            } catch (error) {
              // console.log(error)
            } finally {
              setTimeout(() => {
                // end_loading(myButton, 'Upload')
              }, 1000);
            }
          };
          // END FUNCTION

          const uploadfile = async (header_res, selectedFile, range = null) => {
            // alert(range)
            if (selectedFile) {
              // Create a new FileReader
              const fileReader = new FileReader();

              // Define an event handler for when the file is loaded
              fileReader.onload = function (event) {
                //alert(event)
                let chunkIndex = "";
                // Access the file data as an ArrayBuffer
                const arrayBuffer = event.target.result;

                // Convert the ArrayBuffer to a Uint8Array
                const uint8Array = new Uint8Array(arrayBuffer);

                // Get a chunk of 256KB from the Uint8Array
                const chunkSize = 256 * 1024; // 200KB
                // Initialize variables for tracking chunk index and total chunks

                if (range !== null) {
                  chunkIndex = localStorage.getItem("chunkIndex");
                } else {
                  chunkIndex = 0;
                }

                const totalChunks = Math.ceil(uint8Array.length / chunkSize);

                const uploadLessThan = async (range = null, selectedFile) => {
                  const totalSize_ = uint8Array.length;
                  let chunk_ = "";
                  //// console.log(`the chunk is ${chunk_}`)

                  let _start = "";

                  if (range != null) {
                    // console.log('range is present')
                    _start = Number(range) + 1;
                    // console.log(_start)
                    chunk_ = uint8Array.slice(_start, uint8Array.length);
                  } else {
                    _start = 0;
                    chunk_ = uint8Array;
                  }

                  // Step 2: Upload the file
                  const uploadFile = async (header_res, selectedFile) => {
                    let progress = `
                    <div class="card shadow p-2 pb-3  talmabout${i_}${countDownUpload}${randomId}">

                      <span class="text-xs text-blue-700 text-left pl-1">${selectedFile.name}</span>
                      <div class="flex mt-1">
                        <div class="mr-3 font-medium dark:text-white  flex items-center text-slate-800 " id="upload_percentage${i_}${countDownUpload}${randomId}">0%</div>
                        <div id="result" style="display: none;" class="flex items-center text-red-500 dark:text-red-500 offline ">
                          <i class="bi bi-wifi-off" style="font-size: 20px;"></i>
                          <span>Seems you are offline, Dont leave this page </span>
                        </div>
                      </div>

                      <div class="progress h-2 bg-slate-150 dark:bg-navy-500">
                        <div class="is-active relative overflow-hidden rounded-full bg-warning progress_bar${i_}${countDownUpload}${randomId}">

                        </div>
                      </div>
                    </div><br>
                    `;
                    $("#add_progressbar").append(progress);
                    // add progress bar to loader
                    // alert(localStorage.getItem('folder_id'))
                    const response = await axios({
                      method: "PUT",
                      url: header_res,
                      headers: {
                        "Content-Range": `bytes ${_start}-${
                          totalSize_ - 1
                        }/${totalSize_}`,
                        "Content-Type": selectedFile.type, // Specify the MIME type
                      },
                      data: chunk_,
                      onUploadProgress: (progressEvent) => {
                        const myButton =
                          document.getElementById("show_progress");
                        myButton.click();

                        if (range != null) {
                          // console.log('totalsize' + totalSize_)
                          let new_load = progressEvent.loaded + Number(range);
                          let percentCompleted = Math.round(
                            (new_load / totalSize_) * 100
                          );
                          $(".prog").text(`${Math.round(percentCompleted)}%`);

                          // console.log(`Upload Progress: ${percentCompleted}%`);
                          // console.log(`File Loaded: ${new_load}`);

                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).removeClass("bg-green-500");
                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).addClass("is-active");
                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).addClass("bg-orange-500");
                          $("#progress_bar_section").show();
                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).css("width", `${percentCompleted.toFixed(2)}%`);
                          $(
                            `#upload_percentage${i_}${countDownUpload}${randomId}`
                          ).text(`${Math.round(percentCompleted)}%`);
                        } else {
                          // Calculate and report the upload progress
                          $(".prog").text(
                            `${Math.round(
                              (progressEvent.loaded * 100) / progressEvent.total
                            )}%`
                          );
                          let percentCompleted = Math.round(
                            (progressEvent.loaded * 100) / progressEvent.total
                          );

                          // console.log(`Upload Progress: ${percentCompleted}%`);
                          // console.log(`File Loaded: ${progressEvent.loaded}`);

                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).removeClass("bg-green-500");
                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).addClass("is-active");
                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).addClass("bg-orange-500");
                          $("#progress_bar_section").show();
                          $(
                            `#upload_percentage${i_}${countDownUpload}${randomId}`
                          ).text(`${Math.round(percentCompleted)}%`);
                          $(
                            `.progress_bar${i_}${countDownUpload}${randomId}`
                          ).css("width", `${percentCompleted.toFixed(2)}%`);
                        }
                      },
                    })
                      .then((response) => {
                        // Handle a successful response here

                        if (response.status == 200) {
                          $(
                            ".progress_bar" +
                              i_ +
                              "" +
                              countDownUpload +
                              "" +
                              randomId
                          ).removeClass("bg-orange-500");
                          $(
                            ".progress_bar" +
                              i_ +
                              "" +
                              countDownUpload +
                              "" +
                              randomId
                          ).removeClass("bg-warning");
                          $(
                            ".progress_bar" +
                              i_ +
                              "" +
                              countDownUpload +
                              "" +
                              randomId
                          ).removeClass("is-active");
                          $(
                            ".progress_bar" +
                              i_ +
                              "" +
                              countDownUpload +
                              "" +
                              randomId
                          ).addClass("bg-green-500");
                          // resolve();
                        }
                        gogetMetadata(response.data, selectedFile);
                      })
                      .catch((error) => {
                        if (error.response) {
                          // The request was made and the server responded with a non-2xx status code
                          // console.log('Error response status:', error.response.status);
                          // console.log('Error response data:', error.response.data);
                        } else if (error.request) {
                          // The request was made but no response was received, typically a network issue
                          // console.error('Network issue:', error.request);
                          checkResume(header_res, totalSize_);
                        } else {
                          // Something happened in setting up the request or during the request
                          // console.error('Request error:', error.message);
                        }
                      });
                  };

                  uploadFile(header_res, selectedFile);
                };

                const gogetMetadata = async (res, selectedFile) => {
                  let links = [];
                  let web = "";
                  let down = "";
                  // console.log(this.allWebDownloadLink)
                  // Assuming you have authenticated and obtained an access token
                  let accessToken = "<%= uploadToken %>"; // Replace with your actual access token
                  const fileId = res.id; // Replace with the actual file ID

                  // Make a request to fetch the file's metadata, including webViewLink
                  const webLink = `https://www.googleapis.com/drive/v3/files/${fileId}?fields=webViewLink`;
                  const webContent = `https://www.googleapis.com/drive/v3/files/${fileId}?fields=webContentLink`;
                  const webDownload = `https://www.googleapis.com/drive/v3/files/${fileId}?supportsTeamDrives=true&alt=media`;
                  try {
                    const linkResponse = await fetch(webLink, {
                      method: "GET",
                      headers: {
                        Authorization: `Bearer ${accessToken}`,
                        Accept: "application/json",
                      },
                    });
                    // console.log('link status:' + linkResponse.status)
                    if (linkResponse.status == 200) {
                      let link = await linkResponse.json();
                      // console.log(link.webViewLink);
                      web = link.webViewLink;
                      // alert('update and submit')

                      // submitAndUpdate(selectedFile, fileId)
                    }
                  } catch (error) {
                    // console.error('Error fetching wbviewLink:', error);
                  }
                  try {
                    const linkContent = await fetch(webContent, {
                      method: "GET",
                      headers: {
                        Authorization: `Bearer ${accessToken}`,
                        Accept: "application/json",
                      },
                    });

                    let content = await linkContent.json();
                    // console.log(content.webContentLink)
                    // console.log(content)

                    // Remove the "&authuser=0" part from the URL.
                    const newUrl = content.webContentLink.replace(
                      /&authuser=0/,
                      ""
                    );

                    // Extract the ID from the original URL
                    const id = content.webContentLink.match(/id=([^&]+)/)[1];

                    // Construct the desired URL by injecting the extracted ID
                    const desiredUrl = `https://drive.usercontent.google.com/u/1/uc?id=${id}&export=download`;

                    // console.log('desiredUrl', desiredUrl);
                    down = desiredUrl;
                  } catch (error) {
                    // console.error('Error fetching webViewContent:', error);
                  }

                  resolve({
                    name: selectedFile.name,
                    time: selectedFile.lastModified,
                    webViewLink: web,
                    downloadLink: down,
                  });
                };

                // Function to update the progress bar and text

                // Check if file size is less than 256 of equal to 256 kb
                // console.log(uint8Array.length)
                if (uint8Array.length >= 1024) {
                  // console.log('less thank')
                  uploadLessThan(range, selectedFile);
                }
              };

              // Read the file as an ArrayBuffer
              fileReader.readAsArrayBuffer(selectedFile);
            }
          };
          getlocations(selectedFile);
        }); // End Promise
      }; // End startProcessing function

      // START looping the files
      const loop = async (randomId) => {
        if (uploadedFiles.length > 0) {
          // Set this status to pending, and update it after the images have been uploaded to drive completelys
          this.UploadStatusProgress = "pending";
        }

        for (var i = 0; i < uploadedFiles.length; i++) {
          this.allUploadedFiles = this.allUploadedFiles - 1;
          console.log(`for ${i} we have ${this.allUploadedFiles} `);

          const getResolve = await startFileProcessing(
            uploadedFiles[i],
            i,
            this.countDownUpload,
            randomId
          );
          if (getResolve) {
            this.UploadStatusProgress = "completed";
          }
          this.allWebDownloadLink.push(getResolve);
          console.log(this.allWebDownloadLink);
        }
      };

      async function generateRandomId() {
        let idSet = new Set();

        return Math.floor(Math.random() * 900000) + 100000;
      }

      const randomId = await generateRandomId();
      console.log(this.allUploadedFiles + " {}{}{}All uploaded files");

      if (this.countDownUpload >= 0) {
        this.countDownUpload = this.countDownUpload - 1;
        console.log(this.allUploadedFiles + "All uploaded files");
        await loop(randomId);
      }

      this.ensureOnce += 1;

      // eneure once has to be equal to the total count of uploader inputs in the form to knwo which is the last
      console.log("this is all upload", this.allUploadedFiles);
      // alert(`${this.ensureOnce } is equal ${this.ensure}`)
      // alert(this.allUploadedFiles)
      if (this.allUploadedFiles == 0 && this.ensureOnce == this.ensure) {
        // alert('first this')
        // alert(this.fileSourceName.length+ '<= file source length')

        if (this.fileSourceName.length > 0) {
          // alert('it is greater than 0')
          let firstArray = this.fileSourceName;
          let secondArray = this.allWebDownloadLink;
          console.log("^^^^^^^^^^^^^^^^^^%%%%%%%%%%%%%%%%%%");
          console.log(firstArray);
          console.log(secondArray);
          // Iterate through the second array and add 'label' property from the first array
          secondArray.forEach((secondItem) => {
            const matchingFirstItem = firstArray.find(
              (firstItem) =>
                firstItem.name === secondItem.name &&
                firstItem.time === secondItem.time
            );

            console.log(matchingFirstItem);
            if (matchingFirstItem) {
              secondItem.label = matchingFirstItem.label;
              secondItem.fieldCount = matchingFirstItem.fieldCount;
            }
          });

          // this.submitAndUpdate()

          function _saveRepliesToDrive() {
            /*
                  this handles clicking of the downloadToDOc button
                  its done here because it cant be accessed outside of this function from the holding function
                */
            console.log("saveRepliesToDrive ss");
            const downlaodToDoc = document.querySelector(`#downloadToDoc`);
            downlaodToDoc.click();
          }

          async function processLinks() {
            secondArray.forEach((secondItem) => {
              let fileValueLink = document.querySelector(
                `.getCount${secondItem.fieldCount}`
              );
              console.log(fileValueLink);
              if (fileValueLink) {
                // Create a new anchor element
                const anchorElement = document.createElement("a");
                anchorElement.href = secondItem.webViewLink;
                anchorElement.textContent = secondItem.name;

                // Append the anchor element to the selected element
                fileValueLink.appendChild(anchorElement);
                // Create a <br> element
                const lineBreak = document.createElement("br");
                // Append the <br> element after the anchor element
                fileValueLink.appendChild(lineBreak);
              } else {
              }
            }); // END FOREACH

            _saveRepliesToDrive();
          }

          await processLinks();
        }
      }
    },
  }));
</script>
