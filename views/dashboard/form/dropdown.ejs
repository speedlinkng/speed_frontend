<template
  x-data="dropdown_"
  x-if="field.fieldType && field.fieldType.fieldName === 'Dropdown'"
>
  <div
    class="mt-3"
    x-data="{keyComb:''+pageKey+''+fieldKey+'', inputValue:'', conditionValue:'', error:[{validation:false, required:false, message:''}], completeCondition:[], showLabel: true, _if:'all', _matches:[], _conditions:[], _conditionsWord:[], _compared:[]}"
  >
    <!-- SETTINGS -->
    <template x-for="(set, index) in setting">
      <input
        x-init="dropdownSettings[keyComb] = dropdownSettings[keyComb] || []; dropdownSettings[keyComb].push({ [set.inputName]: set.inputValue })"
        class="hidden"
        x-bind:class="'FU_'+(set.inputName).replace(/\s/g, '').replace(/[()]/g, '');"
        :value="set.inputValue"
      />
    </template>
    <!-- CONDITIONS -->

    <template
      x-if="Object.entries(condition)[0][0] === 'firstCondition'"
      x-init="console.log('')"
    >
      <div>
        <!-- <div x-text="Object.keys(conditionType[1]).length"></div> -->
        <template x-for="(con, conIndex) in Object.entries(condition)[0][1]">
          <div>
            <template x-if="con.selectorName === 'hide-show'">
              <div
                class="hidden"
                x-text="con.selectorValue"
                x-init=" showLabel = con.selectorValue === 'Hide';"
              ></div>
            </template>
            <template x-if="con.selectorName === 'if'">
              <div
                class="hidden"
                x-text="con.selectorValue"
                x-init=" _if = con.selectorValue;"
              ></div>
            </template>
          </div>

          <!-- <div class="border"  x-text="con.selectorValue" x-init="con.selectorName === 'hide-show' ? showLabel = con.selectorValue === 'show' : null; console.log(showLabel);"></div> -->
        </template>
      </div>
    </template>

    <template
      x-init="console.log(Object.entries(condition)[1][1])"
      x-if="Object.entries(condition)[1][0] === 'secondCondition'"
    >
      <div>
        <!-- <div x-text="Object.keys(conditionType[1]).length"></div> -->
        <template x-for="(con, conIndex) in Object.entries(condition)[1][1]">
          <div x-init="console.log((Object.entries(condition)[1][1].length)/3)">
            <div
              class=""
              x-data="{ countcondition: 0 }"
              x-init="countcondition = Math.floor(conIndex / 3) + 1"
            >
              <template x-if="con.SCL_selectorName === 'matches'">
                <div
                  :class="con.SCL_selectorName+conIndex"
                  class="hidden"
                  x-init="_matches.push(con.SCL_selectorValue)"
                ></div>
              </template>
              <template x-if="con.SCL_selectorName === 'condition'">
                <div
                  :class="con.SCL_selectorName+conIndex"
                  class="hidden"
                  x-init="conditionPush(con.SCL_selectorValue, _conditions, _conditionsWord)"
                ></div>
              </template>
              <template x-if="con.SCL_inputName === 'compared'">
                <div
                  :class="con.SCL_inputName+conIndex"
                  class="hidden"
                  x-init="comparedPush(con.SCL_inputValue, _compared, _conditionsWord, countcondition)"
                ></div>
              </template>

              <template x-if="conIndex % 3 === 2">
                <div
                  x-init="checkFor(countcondition, fieldType.fieldValue+keyComb, _matches, _conditions, _compared)"
                ></div>
              </template>
            </div>
          </div>
        </template>

        <div class="hidden">
          <div x-text="JSON.stringify(_matches)"></div>
          <div x-text="JSON.stringify(_conditions)"></div>
          <div x-text="JSON.stringify(_compared)"></div>
        </div>

        <!-- Auto click to check if conditions have been mt -->
        <input
          x-bind:data-pointId="field.fieldCount"
          :value="_if"
          :class="((fieldType.fieldValue+keyComb).replace(/\s/g, ''))"
          class="hidden"
        />
        <input
          :value="conditionValue"
          @click="autoClick(showLabel, (fieldType.fieldValue+keyComb).replace(/\s/g, ''))"
          :id="((fieldType.fieldValue+keyComb).replace(/\s/g, ''))"
          class="hidden"
        />
      </div>
    </template>

    <label
      x-show="showLabel"
      class="block"
      style="font-weight: 500"
      x-ref="`${(fieldType.fieldValue).replace(/\s/g, '')}${fieldIndex}`"
    >
      <div class="flex">
        <span
          :class="'Namefield'+keyComb"
          class="text-sm"
          x-text="(fieldType.fieldValue+keyComb).charAt(0).toUpperCase() + (fieldType.fieldValue).slice(1)"
          >Dropdown?</span
        >
        <span
          x-bind:class="setting.find(item => item.inputName === 'Required' && item.inputValue === 'on') ? 'block' : 'hidden'"
          class="text-red-400 ml-1"
          >*</span
        >
      </div>
      <template x-for="(set, index) in setting">
        <input
          class="hidden"
          x-bind:class="'FU_'+(set.inputName).replace(/\s/g, '').replace(/[()]/g, '');"
          :value="set.inputValue"
        />
      </template>
      <select
        x-bind:data-pointId="field.fieldCount"
        x-ref="fieldIndex+''+pageKey"
        @click="submitForm_ ? checkSettings(dropdownSettings, fieldType.fieldValue, error[0],fieldType, 'submit') : noSubmit"
        x-model="inputValue"
        :class="[(error[0].validation === true) ? '!border-[#ff5724]' :'',(fieldType.fieldValue).replace(/\s/g, '')+keyComb, 'field'+keyComb]"
        @change="handleInput(fieldType.fieldValue, fieldIndex);checkSettings(dropdownSettings, fieldType.fieldValue, error[0],fieldType)"
        class="form-select mt-1.5 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:bg-navy-700 dark:hover:border-navy-400 dark:focus:border-accent placeholder:text-slate-400/70"
      >
        <option x-init="" :value="">--</option>
        <template x-for="(options, optionIndex) in setting[0].inputValue">
          <option x-init="" :value="options" x-text="options"></option>
        </template>
      </select>
      <span
        :class="'description'+keyComb"
        x-text="(setting.find(item => item.inputName === 'Description') || {}).inputValue || ''"
        class="capitalize text-tiny+ text-slate-400 dark:text-navy-300"
        >This is a help text</span
      >
      <span
        :class="(error[0].validation === true) ? 'text-error' :'text-success' "
        x-html="(error[0].validation === true) ? error[0].message: ''"
        class="text-tiny+"
        >Username is valid</span
      >
    </label>
  </div>
</template>

<script>
  Alpine.data("dropdown_", () => ({}));
</script>
